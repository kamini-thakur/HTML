<?php
/**
 * Initialize the custom theme options.
 */
add_action( 'init', 'custom_theme_options' );

/**
 * Build the custom settings & update OptionTree.
 */
function custom_theme_options() {
  
  /* OptionTree is not loaded yet, or this is not an admin request */
  if ( ! function_exists( 'ot_settings_id' ) || ! is_admin() )
    return false;
    
  /**
   * Get a copy of the saved settings array. 
   */
  $saved_settings = get_option( ot_settings_id(), array() );
  
  /**
   * Custom settings array that will eventually be 
   * passes to the OptionTree Settings API Class.
   */
  $custom_settings = array( 
    'contextual_help' => array( 
      'sidebar'       => ''
    ),
    'sections'        => array( 
      array(
        'id'          => 'general',
        'title'       => esc_html__( 'General Options', 'mag' )
      ),
      array(
        'id'          => 'header_options',
        'title'       => esc_html__( 'Header Options', 'mag' )
      ),
	  array(
        'id'          => 'navigation_options',
        'title'       => esc_html__( 'Menu Options', 'mag' )
      ),
      array(
        'id'          => 'color_options',
        'title'       => esc_html__( 'Content Visuals', 'mag' )
      ),
      array(
        'id'          => 'typography',
        'title'       => esc_html__( 'Typography', 'mag' )
      ),
      array(
        'id'          => 'footer_options',
        'title'       => esc_html__( 'Footer', 'mag' )
      ),
      array(
        'id'          => 'articles_section',
        'title'       => esc_html__( 'Single Post', 'mag' )
      ),
      array(
        'id'          => 'blog_section',
        'title'       => esc_html__( 'Blog  Options', 'mag' )
      ),
      array(
        'id'          => 'category_style_tab',
        'title'       => esc_html__( 'Categories', 'mag' )
      )
    ),
    'settings'        => array( 
      array(
        'id'          => 'accent_color',
        'label'       => esc_html__( 'Theme accent color', 'mag' ),
        'desc'        => esc_html__( 'This will be general color scheme for your website. Click input field for color picker.', 'mag' ),
        'std'         => '#ffda23',
        'type'        => 'colorpicker_opacity',
        'section'     => 'general',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),      
	  array(
        'id'          => 'accent_contrast_color',
        'label'       => esc_html__( 'Contrast color for theme accent color', 'mag' ),
        'desc'        => esc_html__( 'This will be contrast color for elements that are on "accent color" colored background.', 'mag' ),
        'std'         => '#1b1b1b',
        'type'        => 'colorpicker_opacity',
        'section'     => 'general',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'layout_style',
        'label'       => esc_html__( 'Layout style', 'mag' ),
		'desc'        => sprintf (esc_html_x( '1. Full width layout %1$s 2. Boxed layout', '%1$s stands for line break' ,'mag' ), '<br/>'),
        'std'         => 'full-width',
        'type'        => 'radio-image',
        'section'     => 'general',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'body_background',
        'label'       => esc_html__( 'Body background', 'mag' ),
        'desc'        => esc_html__( 'Choose body background for boxed layout.', 'mag' ),
        'std'         => '',
        'type'        => 'background',
        'section'     => 'general',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => 'layout_style:is(boxed)',
        'operator'    => 'and'
      ),
	  array(
        'id'          => 'content_width',
        'label'       => esc_html__( 'Content width', 'mag' ),
        'desc'        => esc_html__( 'This setting will apply selected layout width in pixels to your website.', 'mag' ),
        'std'         => '1200px',
        'type'        => 'text',
        'section'     => 'general',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'sticky_sidebar',
        'label'       => esc_html__( 'Sticky sidebar', 'mag' ),
        'desc'        => esc_html__( 'If enabled, sidebar will always be visible while you scroll.', 'mag' ),
        'std'         => 'on',
        'type'        => 'on-off',
        'section'     => 'general',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'scroll_to_top_button',
        'label'       => esc_html__( 'Scroll to top button', 'mag' ),
        'desc'        => esc_html__( 'Enable or disable "To Top" button when you scroll down.', 'mag' ),
        'std'         => 'on',
        'type'        => 'on-off',
        'section'     => 'general',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'default_header_tab',
        'label'       => esc_html__( 'General', 'mag' ),
        'desc'        => '',
        'std'         => '',
        'type'        => 'tab',
        'section'     => 'header_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
	  array(
        'id'          => 'header_height',
        'label'       => esc_html__( 'Header height', 'mag' ),
		'desc'        => sprintf (esc_html_x( 'Set header height. Please add size units, e.g., %s', '%s stands for example value. Do not delete it.' ,'mag' ), '<code>70px</code>'),
        'std'         => '100px',
        'type'        => 'text',
        'section'     => 'header_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
	  array(
        'id'          => 'header_bg',
        'label'       => esc_html__( 'Header background color', 'mag' ),
        'desc'        => esc_html__( 'Choose your site header color.', 'mag' ),
        'std'         => '',
        'type'        => 'colorpicker_opacity',
        'section'     => 'header_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'sticky_header',
        'label'       => esc_html__( 'Sticky header', 'mag' ),
        'desc'        => esc_html__( 'Do you want a header to stick to top while you scroll?', 'mag' ),
        'std'         => 'sticky_header_smart',
        'type'        => 'radio',
        'section'     => 'header_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and',
        'choices'     => array( 
          array(
            'value'       => 'sticky_header_smart',
            'label'       => esc_html__( 'Smart header (sticky only when scrolling up)', 'mag' ),
            'src'         => ''
          ),
          array(
            'value'       => 'sticky_header',
            'label'       => esc_html__( 'Always sticky header', 'mag' ),
            'src'         => ''
          ),
          array(
            'value'       => 'no_sticky',
            'label'       => esc_html__( 'Disable sticky header', 'mag' ),
            'src'         => ''
          )
        )
      ),
      array(
        'id'          => 'header_width',
        'label'       => esc_html__( 'Full width header', 'mag' ),
        'desc'        => esc_html__( 'If not active, header will be the same width as your chosen content width.', 'mag' ),
        'std'         => 'off',
        'type'        => 'on-off',
        'section'     => 'header_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
	  array(
        'id'          => 'header_border',
        'label'       => esc_html__( 'Header shadow line', 'mag' ),
        'desc'        => esc_html__( 'Adds bottom shadow line to the default header.', 'mag' ),
        'std'         => 'off',
        'type'        => 'on-off',
        'section'     => 'header_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
	  array(
        'id'          => 'search_button',
        'label'       => esc_html__( 'Search button in menu', 'mag' ),
        'desc'        => esc_html__( 'Enables or disables search from menu.', 'mag' ),
        'std'         => 'on',
        'type'        => 'on-off',
        'section'     => 'header_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'logo_tab',
        'label'       => esc_html__( 'Logo', 'mag' ),
        'desc'        => '',
        'std'         => '',
        'type'        => 'tab',
        'section'     => 'header_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'logo',
        'label'       => esc_html__( 'Logo', 'mag' ),
        'desc'        => esc_html__( 'Please choose an image file for your logo.', 'mag' ),
        'std'         => '',
        'type'        => 'upload',
        'section'     => 'header_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'logo_retina',
        'label'       => esc_html__( 'Logo (Retina version @2x)', 'mag' ),
		'desc'        => sprintf (esc_html_x( 'Retina logo should be %s the size of default logo keeping the aspect ratio!', '%s stands for the value. Do not delete it.' ,'mag' ), '<code>2x</code>'),
        'std'         => '',
        'type'        => 'upload',
        'section'     => 'header_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'retina_logo_width',
        'label'       => esc_html__( 'Standard logo width', 'mag' ),
		'desc'        => sprintf (esc_html_x( 'Please enter the STANDARD (1x) logo width. %1$s Remember to add %2$s value in the end. Example: %3$s', '%1$s stands for line break, %2$s and %3$s stand for example value.' ,'mag' ), '<br/>', '<code>px</code>', '<code>100px</code>'),
        'std'         => '',
        'type'        => 'text',
        'section'     => 'header_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'retina_logo_height',
        'label'       => esc_html__( 'Standard logo height', 'mag' ),
		'desc'        => sprintf (esc_html_x( 'Please enter the STANDARD (1x) logo height. %1$s Remember to add %2$s value in the end. Example: %3$s', '%1$s stands for line break, %2$s and %3$s stand for example value.' ,'mag' ), '<br/>', '<code>px</code>', '<code>100px</code>'),
        'std'         => '',
        'type'        => 'text',
        'section'     => 'header_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'logo_top',
        'label'       => esc_html__( 'Margin top', 'mag' ),
		'desc'        => sprintf (esc_html_x( 'Move your logo vertically with this option. Remember to add %1$s value after the number. For example: %2$s', '%1$s and %2$s stand for example value. Do not delete it.' ,'mag' ), '<code>px</code>', '<code>25px</code>'),
        'std'         => '',
        'type'        => 'text',
        'section'     => 'header_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
	  array(
        'id'          => 'overlay_header_tab',
        'label'       => esc_html__( 'Overlay Header', 'mag' ),
        'desc'        => '',
        'std'         => '',
        'type'        => 'tab',
        'section'     => 'header_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
	  array(
        'id'          => 'overlay_header_height',
        'label'       => esc_html__( 'Overlay header height', 'mag' ),
		'desc'        => sprintf (esc_html_x('Set header height. Please add size units, e.g., %s', '%s stands for example value. Do not delete it.' ,'mag' ), '<code>70px</code>'),
        'std'         => '',
        'type'        => 'text',
        'section'     => 'header_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
	  array(
        'id'          => 'detached_overlay_header',
        'label'       => esc_html__( 'Detached header?', 'mag' ),
        'desc'        => esc_html__( 'Detaches header from top and applies boxed style to it.', 'mag' ),
        'std'         => 'off',
        'type'        => 'on-off',
        'section'     => 'header_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'detached_overlay_header_background',
        'label'       => esc_html__( 'Deteached overlay header background color', 'mag' ),
        'desc'        => esc_html__( 'Choose background color for detached header.', 'mag' ),
        'std'         => '#1b1b1b',
        'type'        => 'colorpicker_opacity',
        'section'     => 'header_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => 'detached_overlay_header:is(on)',
        'operator'    => 'and'
      ),
	  array(
        'id'          => 'overlay_header_bg',
        'label'       => esc_html__( 'Overlay header background color', 'mag' ),
        'desc'        => esc_html__( 'Transparent by default.', 'mag' ),
        'std'         => '',
        'type'        => 'colorpicker_opacity',
        'section'     => 'header_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => 'detached_overlay_header:not(on)',
        'operator'    => 'and'
      ),
	  array(
        'id'          => 'overlay_sticky_menu_bg',
        'label'       => esc_html__( 'Sticky menu background color', 'mag' ),
        'desc'        => esc_html__( 'Sticky menu background should contrast menu link color.', 'mag' ),
        'std'         => '',
        'type'        => 'colorpicker_opacity',
        'section'     => 'header_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => 'detached_overlay_header:not(on)',
        'operator'    => 'and'
      ), 
	  array(
        'id'          => 'overlay_logo',
        'label'       => esc_html__( 'Overlay header logo', 'mag' ),
        'desc'        => esc_html__( 'Please choose an image file for your logo.', 'mag' ),
        'std'         => '',
        'type'        => 'upload',
        'section'     => 'header_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'overlay_logo_retina',
        'label'       => esc_html__( 'Overlay header logo (Retina version @2x)', 'mag' ),
		'desc'        => sprintf (esc_html_x( 'Retina logo should be %s the size of default logo keeping the aspect ratio!', '%s stands for the value. Do not delete it.' ,'mag' ), '<code>2x</code>'),
        'std'         => '',
        'type'        => 'upload',
        'section'     => 'header_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
	  array(
        'id'          => 'overlay_retina_logo_width',
        'label'       => esc_html__( 'Overlay header logo width', 'mag' ),
		'desc'        => sprintf (esc_html_x( 'Please enter the STANDARD (1x) overlay logo width. %1$s Remember to add %2$s value in the end. Example: %3$s', '%1$s stands for line break, %2$s and %3$s stand for example value.' ,'mag' ), '<br/>', '<code>px</code>', '<code>100px</code>'),
        'std'         => '',
        'type'        => 'text',
        'section'     => 'header_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'overlay_retina_logo_height',
        'label'       => esc_html__( 'Overlay header logo height', 'mag' ),
		'desc'        => sprintf (esc_html_x( 'Please enter the STANDARD (1x) overlay logo height. %1$s Remember to add %2$s value in the end. Example: %3$s', '%1$s stands for line break, %2$s and %3$s stand for example value.' ,'mag' ), '<br/>', '<code>px</code>', '<code>100px</code>'),
        'std'         => '',
        'type'        => 'text',
        'section'     => 'header_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
	  array(
        'id'          => 'overlay_logo_top',
        'label'       => esc_html__( 'Overlay header logo margin top', 'mag' ),
		'desc'        => sprintf (esc_html_x( 'Move your logo vertically with this option. Remember to add %1$s value after the number. For example: %2$s', '%1$s and %2$s stand for example value. Do not delete it.' ,'mag' ), '<code>px</code>', '<code>25px</code>'),
        'std'         => '',
        'type'        => 'text',
        'section'     => 'header_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'top_bar_tab',
        'label'       => esc_html__( 'Top Bar', 'mag' ),
        'desc'        => '',
        'std'         => '',
        'type'        => 'tab',
        'section'     => 'header_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'top_bar',
        'label'       => esc_html__( 'Top bar', 'mag' ),
        'desc'        => esc_html__( 'Top bar appears above the header. If activated, new widget areas appear in Appearance/Widgets - "Top Bar Sidebar Left" and "Top Bar Sidebar Right".', 'mag' ),
        'std'         => 'on',
        'type'        => 'on-off',
        'section'     => 'header_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'top_bar_bg',
        'label'       => esc_html__( 'Background color', 'mag' ),
        'desc'        => esc_html__( 'Click input field for color picker or enter your custom value.', 'mag' ),
        'std'         => '#1b1b1b',
        'type'        => 'colorpicker_opacity',
        'section'     => 'header_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => 'top_bar:is(on)',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'top_bar_text_color',
        'label'       => esc_html__( 'Text color', 'mag' ),
        'desc'        => esc_html__( 'Click input field for color picker or enter your custom value.', 'mag' ),
        'std'         => '#ffffff',
        'type'        => 'colorpicker_opacity',
        'section'     => 'header_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => 'top_bar:is(on)',
        'operator'    => 'and'
      ),
	  array(
        'id'          => 'top_bar_link_color',
        'label'       => esc_html__( 'Link color', 'mag' ),
        'desc'        => esc_html__( 'Click input field for color picker or enter your custom value.', 'mag' ),
        'std'         => 'rgba(255, 255, 255, 0.7)',
        'type'        => 'colorpicker_opacity',
        'section'     => 'header_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => 'top_bar:is(on)',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'top_bar_link_hover',
        'label'       => esc_html__( 'Link hover color', 'mag' ),
        'desc'        => esc_html__( 'Click input field for color picker or enter your custom value.', 'mag' ),
        'std'         => '#ffffff',
        'type'        => 'colorpicker_opacity',
        'section'     => 'header_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => 'top_bar:is(on)',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'mobile_header_tab',
        'label'       => esc_html__( 'Mobile Header', 'mag' ),
        'desc'        => '',
        'std'         => '',
        'type'        => 'tab',
        'section'     => 'header_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'mobile_menu_background',
        'label'       => esc_html__( 'Mobile menu background color', 'mag' ),
        'desc'        => esc_html__( 'Choose background color for mobile menu.', 'mag' ),
        'std'         => '',
        'type'        => 'colorpicker_opacity',
        'section'     => 'header_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'mobile_menu_toggle_color',
        'label'       => esc_html__( 'Mobile menu toggle and header text color', 'mag' ),
        'desc'        => esc_html__( 'Choose color for mobile menu toggle icon and other content in mobile header.', 'mag' ),
        'std'         => '',
        'type'        => 'colorpicker_opacity',
        'section'     => 'header_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'mobile_logo',
        'label'       => esc_html__( 'Mobile logo', 'mag' ),
        'desc'        => esc_html__( 'Please choose an image file for your logo.', 'mag' ),
        'std'         => '',
        'type'        => 'upload',
        'section'     => 'header_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'mobile_logo_retina',
        'label'       => esc_html__( 'Mobile Logo (Retina version @2x)', 'mag' ),
		'desc'        => sprintf (esc_html_x( 'Retina logo should be %s the size of default logo keeping the aspect ratio!', '%s stands for the value. Do not delete it.' ,'mag' ), '<code>2x</code>'),
        'std'         => '',
        'type'        => 'upload',
        'section'     => 'header_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'mobile_retina_logo_width',
        'label'       => esc_html__( 'Mobile logo width', 'mag' ),
		'desc'        => sprintf (esc_html_x( 'Please enter the STANDARD (1x) logo width. %1$s Remember to add %2$s value in the end. Example: %3$s', '%1$s stands for line break, %2$s and %3$s stand for example value.' ,'mag' ), '<br/>', '<code>px</code>', '<code>100px</code>'),
        'std'         => '',
        'type'        => 'text',
        'section'     => 'header_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'mobile_retina_logo_height',
        'label'       => esc_html__( 'Mobile logo height', 'mag' ),
		'desc'        => sprintf (esc_html_x( 'Please enter the STANDARD (1x) logo height. %1$s Remember to add %2$s value in the end. Example: %3$s', '%1$s stands for line break, %2$s and %3$s stand for example value.' ,'mag' ), '<br/>', '<code>px</code>', '<code>100px</code>'),
        'std'         => '',
        'type'        => 'text',
        'section'     => 'header_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),	
	  array(
        'id'          => 'overlay_sidebar_tab',
        'label'       => esc_html__( 'Overlay Sidebar', 'mag' ),
        'desc'        => '',
        'std'         => '',
        'type'        => 'tab',
        'section'     => 'header_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'overlay_sidebar_bg',
        'label'       => esc_html__( 'Background color', 'mag' ),
        'desc'        => esc_html__( 'Click input field for color picker or enter your custom value.', 'mag' ),
        'std'         => '',
        'type'        => 'colorpicker_opacity',
        'section'     => 'header_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'overlay_sidebar_text_color',
        'label'       => esc_html__( 'Text and link color', 'mag' ),
        'desc'        => esc_html__( 'Click input field for color picker or enter your custom value.', 'mag' ),
        'std'         => '',
        'type'        => 'colorpicker_opacity',
        'section'     => 'header_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'overlay_sidebar_link_hover',
        'label'       => esc_html__( 'Link hover color', 'mag' ),
        'desc'        => esc_html__( 'Click input field for color picker or enter your custom value.', 'mag' ),
        'std'         => '',
        'type'        => 'colorpicker_opacity',
        'section'     => 'header_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'navigation_tab',
        'label'       => esc_html__( 'Header Menu', 'mag' ),
        'desc'        => '',
        'std'         => '',
        'type'        => 'tab',
        'section'     => 'navigation_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
		'condition'   => '',
        'operator'    => 'and'
      ),	  
      array(
        'id'          => 'default_menu_link',
        'label'       => esc_html__( 'Menu link color', 'mag' ),
        'desc'        => esc_html__( 'Click input field for color picker or enter your custom value.', 'mag' ),
        'std'         => '#ffffff',
        'type'        => 'colorpicker_opacity',
        'section'     => 'navigation_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'default_menu_link_h',
        'label'       => esc_html__( 'Menu link hover & active color', 'mag' ),
        'desc'        => esc_html__( 'Leave empty to use "Theme accent color".', 'mag' ),
        'std'         => '',
        'type'        => 'colorpicker_opacity',
        'section'     => 'navigation_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'show_submenu_styles',
        'label'       => esc_html__( 'Show submenu options?', 'mag' ),
        'desc'        => esc_html__( 'Enable submenu styling.', 'mag' ),
        'std'         => 'off',
        'type'        => 'on-off',
        'section'     => 'navigation_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'submenu_section_title',
        'label'       => esc_html__( 'Submenu section title', 'mag' ),
        'desc'        => esc_html__( '<div class="section-title">Submenu options</div>', 'mag' ),
        'std'         => '',
        'type'        => 'textblock',
        'section'     => 'navigation_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => 'show_submenu_styles:is(on)',
        'operator'    => 'and'
      ),
	  array(
        'id'          => 'submenu_background',
        'label'       => esc_html__( 'Submenu background color', 'mag' ),
        'desc'        => esc_html__( 'Color background color for submenu.', 'mag' ),
        'std'         => '',
        'type'        => 'colorpicker_opacity',
        'section'     => 'navigation_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => 'show_submenu_styles:is(on)',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'submenu_link_color',
        'label'       => esc_html__( 'Submenu link color', 'mag' ),
        'desc'        => esc_html__( 'Color for links in submenu. Leave blank for default color.', 'mag' ),
        'std'         => '',
        'type'        => 'colorpicker_opacity',
        'section'     => 'navigation_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => 'show_submenu_styles:is(on)',
        'operator'    => 'and'
      ),
	  array(
        'id'          => 'submenu_link_bg_color',
        'label'       => esc_html__( 'Submenu link hover & active background color', 'mag' ),
        'desc'        => esc_html__( 'Background color for submenu link hover.', 'mag' ),
        'std'         => '',
        'type'        => 'colorpicker_opacity',
        'section'     => 'navigation_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => 'show_submenu_styles:is(on)',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'megamenu_section_title',
        'label'       => esc_html__( 'Megamenu section title', 'mag' ),
		'desc'        => '<div class="section-title">'. esc_html__( 'Mega-menu options', 'mag' ) .'</div>',
        'std'         => '',
        'type'        => 'textblock',
        'section'     => 'navigation_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => 'show_submenu_styles:is(on)',
        'operator'    => 'and'
      ),
	  array(
        'id'          => 'megamenu_bg',
        'label'       => esc_html__( 'Background', 'mag' ),
        'desc'        => esc_html__( 'You can either use color or upload a background image. Leave blank to inherit from submenu options.', 'mag' ),
        'std'         => '',
        'type'        => 'background',
        'section'     => 'navigation_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => 'show_submenu_styles:is(on)',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'megamenu_title_color',
        'label'       => esc_html__( 'Megamenu title color', 'mag' ),
        'desc'        => esc_html__( 'Color for column title in megamenu.', 'mag' ),
        'std'         => '',
        'type'        => 'colorpicker_opacity',
        'section'     => 'navigation_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => 'show_submenu_styles:is(on)',
        'operator'    => 'and'
      ),
	  array(
        'id'          => 'megamenu_item_color',
        'label'       => esc_html__( 'Megamenu link color', 'mag' ),
        'desc'        => esc_html__( 'Color for links in megamenu. Leave blank to inherit from submenu.', 'mag' ),
        'std'         => '',
        'type'        => 'colorpicker_opacity',
        'section'     => 'navigation_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => 'show_submenu_styles:is(on)',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'megamenu_active_item_color',
        'label'       => esc_html__( 'Megamenu hover & active item color', 'mag' ),
        'desc'        => esc_html__( 'Leave empty to use "Theme accent color".', 'mag' ),
        'std'         => '',
        'type'        => 'colorpicker_opacity',
        'section'     => 'navigation_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => 'show_submenu_styles:is(on)',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'megamenu_separator_color',
        'label'       => esc_html__( 'Megamenu column separator color', 'mag' ),
        'desc'        => esc_html__( 'Leave empty for default color.', 'mag' ),
        'std'         => '',
        'type'        => 'colorpicker_opacity',
        'section'     => 'navigation_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => 'show_submenu_styles:is(on)',
        'operator'    => 'and'
      ),
	  array(
        'id'          => 'overlay_menu_navigation_tab',
        'label'       => esc_html__( 'Overlay Header Menu', 'mag' ),
        'desc'        => '',
        'std'         => '',
        'type'        => 'tab',
        'section'     => 'navigation_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
		'condition'   => '',
        'operator'    => 'and'
      ),
	  array(
        'id'          => 'overlay_menu_link',
        'label'       => esc_html__( 'Overlay header menu link color', 'mag' ),
        'desc'        => esc_html__( 'Click input field for color picker or enter your custom value.', 'mag' ),
        'std'         => '#ffffff',
        'type'        => 'colorpicker_opacity',
        'section'     => 'navigation_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'overlay_menu_link_h',
        'label'       => esc_html__( 'Overlay header menu link hover & active color', 'mag' ),
        'desc'        => esc_html__( 'Leave empty to use "Theme accent color".', 'mag' ),
        'std'         => '',
        'type'        => 'colorpicker_opacity',
        'section'     => 'navigation_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),     
	  array(
        'id'          => 'side_navigation_tab',
        'label'       => esc_html__( 'Side Menu', 'mag' ),
        'desc'        => '',
        'std'         => '',
        'type'        => 'tab',
        'section'     => 'navigation_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
		'condition'   => '',
        'operator'    => 'and'
      ),
	  array(
        'id'          => 'side_navigation_bg',
        'label'       => esc_html__( 'Background', 'mag' ),
        'desc'        => esc_html__( 'You can either use color or upload a background image. Leave blank for default setting.', 'mag' ),
        'std'         => '',
        'type'        => 'background',
        'section'     => 'navigation_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
	  array(
        'id'          => 'side_navigation_border',
        'label'       => esc_html__( 'Border color', 'mag' ),
        'desc'        => esc_html__( 'Choose side border color for side navigation.', 'mag' ),
        'std'         => '',
        'type'        => 'colorpicker_opacity',
        'section'     => 'navigation_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
	  array(
        'id'          => 'side_navigation_text',
        'label'       => esc_html__( 'Text and title color', 'mag' ),
        'desc'        => esc_html__( 'Choose color for side navigation text and titles.', 'mag' ),
        'std'         => '#ffffff',
        'type'        => 'colorpicker_opacity',
        'section'     => 'navigation_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
	  array(
        'id'          => 'side_navigation_link',
        'label'       => esc_html__( 'Link color', 'mag' ),
        'desc'        => esc_html__( 'Choose color for side navigation links.', 'mag' ),
        'std'         => '',
        'type'        => 'colorpicker_opacity',
        'section'     => 'navigation_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
	  array(
        'id'          => 'side_navigation_link_hover',
        'label'       => esc_html__( 'Link hover color', 'mag' ),
        'desc'        => esc_html__( 'Choose hover color for side navigation links.', 'mag' ),
        'std'         => '',
        'type'        => 'colorpicker_opacity',
        'section'     => 'navigation_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),	  
      array(
        'id'          => 'global_color_section',
        'label'       => esc_html__( 'Global', 'mag' ),
        'desc'        => '',
        'std'         => '',
        'type'        => 'tab',
        'section'     => 'color_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'body_text_color',
        'label'       => esc_html__( 'Body text color', 'mag' ),
        'desc'        => esc_html__( 'General color for all body content.', 'mag' ),
        'std'         => '#333333',
        'type'        => 'colorpicker_opacity',
        'section'     => 'color_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'headings_color',
        'label'       => esc_html__( 'Headings (H1, H2, H3, H4, H5, H6)', 'mag' ),
        'desc'        => esc_html__( 'Color for heading tags. Applies for all heading elements, if different color is not specified in element styling.', 'mag' ),
        'std'         => '#1b1b1b',
        'type'        => 'colorpicker_opacity',
        'section'     => 'color_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'theme_button_color',
        'label'       => esc_html__( 'Theme button color', 'mag' ),
		'desc'        => sprintf (esc_html_x( 'Choose color for general theme buttons. %1$s Leave empty for "Theme accent Color"', '%1$s stands for line break' ,'mag' ), '<br/>'),
        'std'         => '',
        'type'        => 'colorpicker_opacity',
        'section'     => 'color_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'button_text_color',
        'label'       => esc_html__( 'Button Text Color', 'mag' ),
        'desc'        => esc_html__( 'Text color inside theme buttons.', 'mag' ),
        'std'         => '',
        'type'        => 'colorpicker_opacity',
        'section'     => 'color_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
	  array(
        'id'          => 'page_heading_tab',
        'label'       => esc_html__( 'Page Heading', 'mag' ),
        'desc'        => '',
        'std'         => '',
        'type'        => 'tab',
        'section'     => 'color_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
	  array(
        'id'          => 'page_title_paddings',
        'label'       => esc_html__( 'Title area paddings', 'mag' ),
		'desc'        => sprintf (esc_html_x('Set custom paddings for title area. Use shorthand format and add size units, e.g., %s', '%s stands for example value. Do not delete it.' ,'mag' ), '<code>40px 30px</code>'),
        'std'         => '',
        'type'        => 'text',
        'section'     => 'color_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
	  array(
        'id'          => 'page_title_text_color',
        'label'       => esc_html__( 'Title color', 'mag' ),
        'desc'        => esc_html__( 'Choose text color for page title.', 'mag' ),
        'std'         => '',
        'type'        => 'colorpicker_opacity',
        'section'     => 'color_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
	  array(
        'id'          => 'page_title_background_color',
        'label'       => esc_html__( 'Background color', 'mag' ),
        'desc'        => esc_html__( 'Choose background color for page title area.', 'mag' ),
        'std'         => '',
        'type'        => 'colorpicker_opacity',
        'section'     => 'color_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
	  array(
        'id'          => 'page_title_background_gradient',
        'label'       => esc_html__( 'Enable gradient background', 'mag' ),
        'desc'        => esc_html__( 'Enables left to right gradient background for page title area.', 'mag' ),
        'std'         => 'off',
        'type'        => 'on-off',
        'section'     => 'color_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'operator'    => 'and'
      ),
	  array(
        'id'          => 'page_title_background_gradient_start',
        'label'       => esc_html__( 'Gradient start color', 'mag' ),
        'desc'        => esc_html__( 'Choose color at gradient start.', 'mag' ),
        'std'         => '',
        'type'        => 'colorpicker_opacity',
        'section'     => 'color_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => 'page_title_background_gradient:is(on)',
        'operator'    => 'and'
      ),
	  array(
        'id'          => 'page_title_background_gradient_end',
        'label'       => esc_html__( 'Gradient end color', 'mag' ),
        'desc'        => esc_html__( 'Choose color at gradient end.', 'mag' ),
        'std'         => '',
        'type'        => 'colorpicker_opacity',
        'section'     => 'color_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => 'page_title_background_gradient:is(on)',
        'operator'    => 'and'
      ),
	  array(
        'id'          => 'page_title_background_image_switch',
        'label'       => esc_html__( 'Enable background image', 'mag' ),
        'desc'        => esc_html__( 'Enables background image for title area.', 'mag' ),
        'std'         => 'off',
        'type'        => 'on-off',
        'section'     => 'color_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'operator'    => 'and'
      ),
	  array(
        'id'          => 'page_title_background_image',
        'label'       => esc_html__( 'Title area background image', 'mag' ),
        'desc'        => esc_html__( 'Choose background image for the title area.', 'mag' ),
        'std'         => '',
        'type'        => 'background',
        'section'     => 'color_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => 'page_title_background_image_switch:is(on)',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'sidebar_tab',
        'label'       => esc_html__( 'Sidebar', 'mag' ),
        'desc'        => '',
        'std'         => '',
        'type'        => 'tab',
        'section'     => 'color_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'sidebar_text_color',
        'label'       => esc_html__( 'Text color', 'mag' ),
        'desc'        => esc_html__( 'Choose text color for sidebar widget content.', 'mag' ),
        'std'         => '',
        'type'        => 'colorpicker_opacity',
        'section'     => 'color_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'sidebar_link_color',
        'label'       => esc_html__( 'Link color', 'mag' ),
        'desc'        => esc_html__( 'Choose color for links in sidebar.', 'mag' ),
        'std'         => '',
        'type'        => 'colorpicker_opacity',
        'section'     => 'color_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'sidebar_link_hover_color',
        'label'       => esc_html__( 'Link hover color', 'mag' ),
        'desc'        => esc_html__( 'Leave empty to use "Theme accent color".', 'mag' ),
        'std'         => '',
        'type'        => 'colorpicker_opacity',
        'section'     => 'color_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'sidebar_title_color',
        'label'       => esc_html__( 'Widget title color', 'mag' ),
        'desc'        => esc_html__( 'Color for widget titles in sidebar.', 'mag' ),
        'std'         => '',
        'type'        => 'colorpicker_opacity',
        'section'     => 'color_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'sidebar_divider_color',
        'label'       => esc_html__( 'Widget divider color', 'mag' ),
        'desc'        => esc_html__( 'Choose border line color separating list items in sidebar.', 'mag' ),
        'std'         => '',
        'type'        => 'colorpicker_opacity',
        'section'     => 'color_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
	  array(
        'id'          => 'article_colors_tab',
        'label'       => esc_html__( 'Articles', 'mag' ),
        'desc'        => '',
        'std'         => '',
        'type'        => 'tab',
        'section'     => 'color_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
	  array(
        'id'          => 'article_views_color',
        'label'       => esc_html__( 'Post views', 'mag' ),
        'desc'        => esc_html__( 'Choose color for post views number and icon.', 'mag' ),
        'std'         => '',
        'type'        => 'colorpicker_opacity',
        'section'     => 'color_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
	  array(
        'id'          => 'article_colors_overlay_title',
        'label'       => esc_html__( 'Submenu section info', 'mag' ),
        'desc'        => esc_html__( '<div class="section-title">Content over image article style</div>', 'mag' ),
        'std'         => '',
        'type'        => 'textblock',
        'section'     => 'color_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
	  array(
        'id'          => 'article_overlay_background',
        'label'       => esc_html__( 'Overlay article style background', 'mag' ),
        'desc'        => esc_html__( 'Choose background color for content in overlay style articles.', 'mag' ),
        'std'         => '',
        'type'        => 'colorpicker_opacity',
        'section'     => 'color_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
	  array(
        'id'          => 'article_overlay_text',
        'label'       => esc_html__( 'Overlay article style content color', 'mag' ),
        'desc'        => esc_html__( 'Choose text and link color for content in overlay style articles.', 'mag' ),
        'std'         => '',
        'type'        => 'colorpicker_opacity',
        'section'     => 'color_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
	  array(
        'id'          => 'article_overlay_hover',
        'label'       => esc_html__( 'Overlay article link hover', 'mag' ),
        'desc'        => esc_html__( 'Choose hover color for links in overlay style articles.', 'mag' ),
        'std'         => '',
        'type'        => 'colorpicker_opacity',
        'section'     => 'color_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'custom_fonts_tab',
        'label'       => esc_html__( 'Custom fonts', 'mag' ),
        'desc'        => '',
        'std'         => '',
        'type'        => 'tab',
        'section'     => 'typography',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'add_google_fonts',
        'label'       => esc_html__( 'Add Google fonts', 'mag' ),
		'desc'        => sprintf (esc_html_x( '1. Click "Add Google Font". %1$s 2. Choose your font and options. %1$s 3. Save the options. %1$s 4. Assign your new font to elements below.', '%1$s stands for line break' ,'mag' ), '<br/>'),
        'std'         => '',
        'type'        => 'google-fonts',
        'section'     => 'typography',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
	  array(
        'id'          => 'body_font',
        'label'       => esc_html__( 'Body font', 'mag' ),
        'desc'        => '',
        'std'         => '',
        'type'        => 'typography',
        'section'     => 'typography',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'menu_font',
        'label'       => esc_html__( 'Menu font', 'mag' ),
        'desc'        => '',
        'std'         => '',
        'type'        => 'typography',
        'section'     => 'typography',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
	  array(
        'id'          => 'side_menu_font',
        'label'       => esc_html__( 'Side menu font', 'mag' ),
        'desc'        => '',
        'std'         => '',
        'type'        => 'typography',
        'section'     => 'typography',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'heading_font',
        'label'       => esc_html__( 'Heading font', 'mag' ),
        'desc'        => '',
        'std'         => '',
        'type'        => 'typography',
        'section'     => 'typography',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'single_post_font',
        'label'       => esc_html__( 'Single post font', 'mag' ),
        'std'         => '',
        'type'        => 'typography',
        'section'     => 'typography',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'widget_font',
        'label'       => esc_html__( 'Widget title font', 'mag' ),
        'desc'        => '',
        'std'         => '',
        'type'        => 'typography',
        'section'     => 'typography',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'font_size_tab',
        'label'       => esc_html__( 'Font sizes', 'mag' ),
        'desc'        => '',
        'std'         => '',
        'type'        => 'tab',
        'section'     => 'typography',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'body_size',
        'label'       => esc_html__( 'Body', 'mag' ),
		'desc'        => sprintf (esc_html_x( 'General body font size. %1$s Remember to add %2$s px %3$s value after the number. For example: %2$s 16px %3$s', '%1$s stands for line break, %2$s and %3$s stand for <code> tags' ,'mag' ), '<br/>', '<code>', '</code>'),
        'std'         => '16px',
        'type'        => 'text',
        'section'     => 'typography',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'single_post_text_font_size',
        'label'       => esc_html__( 'Single post', 'mag' ),
		'desc'        => sprintf (esc_html_x( 'Single post content font size. %1$s Remember to add %2$s px %3$s value after the number. For example: %2$s 16px %3$s', '%1$s stands for line break, %2$s and %3$s stand for <code> tags' ,'mag' ), '<br/>', '<code>', '</code>'),
        'std'         => '16px',
        'type'        => 'text',
        'section'     => 'typography',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'menu_font_size',
        'label'       => esc_html__( 'Menu in header bar', 'mag' ),
		'desc'        => sprintf (esc_html_x( 'General menu font size. %1$s Remember to add %2$s px %3$s value after the number. For example: %2$s 13px %3$s', '%1$s stands for line break, %2$s and %3$s stand for <code> tags' ,'mag' ), '<br/>', '<code>', '</code>'),
        'std'         => '15px',
        'type'        => 'text',
        'section'     => 'typography',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
	  array(
        'id'          => 'side_overlay_menu_font_size',
        'label'       => esc_html__( 'Side menu', 'mag' ),
		'desc'        => sprintf (esc_html_x( 'Choose size for overlay or side menu, depending on what you use. %1$s Remember to add %2$s px %3$s value after the number. For example: %2$s 13px %3$s', '%1$s stands for line break, %2$s and %3$s stand for <code> tags' ,'mag' ), '<br/>', '<code>', '</code>'),
        'std'         => '24px',
        'type'        => 'text',
        'section'     => 'typography',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'sub_menu_font_size',
        'label'       => esc_html__( 'Sub menu', 'mag' ),
		'desc'        => sprintf (esc_html_x( 'Submenu link font size. %1$s Remember to add %2$s px %3$s value after the number.', '%1$s stands for line break, %2$s and %3$s stand for <code> tags' ,'mag' ), '<br/>', '<code>', '</code>'),
        'std'         => '13px',
        'type'        => 'text',
        'section'     => 'typography',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'h1',
        'label'       => esc_html__( 'H1', 'mag' ),
		'desc'        => sprintf (esc_html_x( 'Heading 1 tag font size. %1$s Remember to add %2$s px %3$s value after the number.', '%1$s stands for line break, %2$s and %3$s stand for <code> tags' ,'mag' ), '<br/>', '<code>', '</code>'),
        'std'         => '30px',
        'type'        => 'text',
        'section'     => 'typography',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'h2',
        'label'       => esc_html__( 'H2', 'mag' ),
		'desc'        => sprintf (esc_html_x( 'Heading 2 tag font size. %1$s Remember to add %2$s px %3$s value after the number.', '%1$s stands for line break, %2$s and %3$s stand for <code> tags' ,'mag' ), '<br/>', '<code>', '</code>'),
        'std'         => '24px',
        'type'        => 'text',
        'section'     => 'typography',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'h3',
        'label'       => esc_html__( 'H3', 'mag' ),
		'desc'        => sprintf (esc_html_x( 'Heading 3 tag font size. %1$s Remember to add %2$s px %3$s value after the number.', '%1$s stands for line break, %2$s and %3$s stand for <code> tags' ,'mag' ), '<br/>', '<code>', '</code>'),
        'std'         => '20px',
        'type'        => 'text',
        'section'     => 'typography',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'h4',
        'label'       => esc_html__( 'H4', 'mag' ),
		'desc'        => sprintf (esc_html_x( 'Heading 4 tag font size. %1$s Remember to add %2$s px %3$s value after the number.', '%1$s stands for line break, %2$s and %3$s stand for <code> tags' ,'mag' ), '<br/>', '<code>', '</code>'),
        'std'         => '18px',
        'type'        => 'text',
        'section'     => 'typography',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'h5',
        'label'       => esc_html__( 'H5', 'mag' ),
		'desc'        => sprintf (esc_html_x( 'Heading 5 tag font size. %1$s Remember to add %2$s px %3$s value after the number.', '%1$s stands for line break, %2$s and %3$s stand for <code> tags' ,'mag' ), '<br/>', '<code>', '</code>'),
        'std'         => '16px',
        'type'        => 'text',
        'section'     => 'typography',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'h6',
        'label'       => esc_html__( 'H6', 'mag' ),
		'desc'        => sprintf (esc_html_x( 'Heading 6 tag font size. %1$s Remember to add %2$s px %3$s value after the number.', '%1$s stands for line break, %2$s and %3$s stand for <code> tags' ,'mag' ), '<br/>', '<code>', '</code>'),
        'std'         => '14px',
        'type'        => 'text',
        'section'     => 'typography',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
	  array(
        'id'          => 'footer_colors_tab',
        'label'       => esc_html__( 'Footer Colors', 'mag' ),
        'desc'        => '',
        'std'         => '',
        'type'        => 'tab',
        'section'     => 'footer_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
	  array(
        'id'          => 'footer_bg',
        'label'       => esc_html__( 'Background', 'mag' ),
        'desc'        => esc_html__( 'You can either use color or upload a background image. Leave blank for default setting.', 'mag' ),
        'std'         => '',
        'type'        => 'background',
        'section'     => 'footer_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'footer_text_color',
        'label'       => esc_html__( 'Text color', 'mag' ),
        'desc'        => esc_html__( 'Choose text color for your footer widget content.', 'mag' ),
        'std'         => '',
        'type'        => 'colorpicker_opacity',
        'section'     => 'footer_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'footer_link',
        'label'       => esc_html__( 'Link color', 'mag' ),
        'desc'        => esc_html__( 'Will apply color to all links located in footer widgets.', 'mag' ),
        'std'         => '',
        'type'        => 'colorpicker_opacity',
        'section'     => 'footer_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'footer_link_hover',
        'label'       => esc_html__( 'Link hover color', 'mag' ),
        'desc'        => esc_html__( 'Hover color for all links in footer widgets.".', 'mag' ),
        'std'         => '',
        'type'        => 'colorpicker_opacity',
        'section'     => 'footer_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'footer_widget_title',
        'label'       => esc_html__( 'Widget title color', 'mag' ),
        'desc'        => esc_html__( 'Color for widget titles in footer.', 'mag' ),
        'std'         => '',
        'type'        => 'colorpicker_opacity',
        'section'     => 'footer_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'footer_first_tab',
        'label'       => esc_html__( 'Footer First Level', 'mag' ),
        'desc'        => '',
        'std'         => '',
        'type'        => 'tab',
        'section'     => 'footer_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'footer_columns',
        'label'       => esc_html__( 'Column count', 'mag' ),
        'desc'        => esc_html__( 'Choose column count for your footer.', 'mag' ),
        'std'         => 'vc_col-sm-3',
        'type'        => 'select',
        'section'     => 'footer_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and',
        'choices'     => array( 
          array(
            'value'       => 'vc_col-sm-12',
            'label'       => esc_html__( '1', 'mag' ),
            'src'         => ''
          ),
          array(
            'value'       => 'vc_col-sm-6',
            'label'       => esc_html__( '2', 'mag' ),
            'src'         => ''
          ),
          array(
            'value'       => 'vc_col-sm-4',
            'label'       => esc_html__( '3', 'mag' ),
            'src'         => ''
          ),
          array(
            'value'       => 'vc_col-sm-3',
            'label'       => esc_html__( '4', 'mag' ),
            'src'         => ''
          )
        )
      ),
      array(
        'id'          => 'footer_column_1_width',
        'label'       => esc_html__( 'Footer column 1 width', 'mag' ),
		'desc'        => sprintf (esc_html_x( 'Enter custom width for first footer column. Please enter percentage, e.g., %s', '%s stands for example value. Do not delete it.' ,'mag' ), '<code>50%</code>'),
        'std'         => '25%',
        'type'        => 'text',
        'section'     => 'footer_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => 'footer_columns:not(vc_col-sm-12)',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'footer_column_2_width',
        'label'       => esc_html__( 'Footer column 2 width', 'mag' ),
		'desc'        => sprintf (esc_html_x( 'Enter custom width for second footer column. Please enter percentage, e.g., %s', '%s stands for example value. Do not delete it.' ,'mag' ), '<code>50%</code>'),
        'std'         => '25%',
        'type'        => 'text',
        'section'     => 'footer_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => 'footer_columns:not(vc_col-sm-12)',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'footer_column_3_width',
        'label'       => esc_html__( 'Footer column 3 width', 'mag' ),
		'desc'        => sprintf (esc_html_x( 'Enter custom width for third footer column. Please enter percentage, e.g., %s', '%s stands for example value. Do not delete it.' ,'mag' ), '<code>50%</code>'),
        'std'         => '25%',
        'type'        => 'text',
        'section'     => 'footer_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => 'footer_columns:not(vc_col-sm-12),footer_columns:not(vc_col-sm-6)',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'footer_column_4_width',
        'label'       => esc_html__( 'Footer column 4 width', 'mag' ),
		'desc'        => sprintf (esc_html_x( 'Enter custom width for fourth footer column. Please enter percentage, e.g., %s', '%s stands for example value. Do not delete it.' ,'mag' ), '<code>50%</code>'),
        'std'         => '25%',
        'type'        => 'text',
        'section'     => 'footer_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => 'footer_columns:is(vc_col-sm-3)',
        'operator'    => 'and'
      ),
	  array(
        'id'          => 'footer_second_tab',
        'label'       => esc_html__( 'Footer Second Level', 'mag' ),
        'desc'        => '',
        'std'         => '',
        'type'        => 'tab',
        'section'     => 'footer_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'footer_second_columns',
        'label'       => esc_html__( 'Column count', 'mag' ),
        'desc'        => esc_html__( 'Choose column count for your footer.', 'mag' ),
        'std'         => 'vc_col-sm-3',
        'type'        => 'select',
        'section'     => 'footer_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and',
        'choices'     => array( 
          array(
            'value'       => 'vc_col-sm-12',
            'label'       => esc_html__( '1', 'mag' ),
            'src'         => ''
          ),
          array(
            'value'       => 'vc_col-sm-6',
            'label'       => esc_html__( '2', 'mag' ),
            'src'         => ''
          ),
          array(
            'value'       => 'vc_col-sm-4',
            'label'       => esc_html__( '3', 'mag' ),
            'src'         => ''
          ),
          array(
            'value'       => 'vc_col-sm-3',
            'label'       => esc_html__( '4', 'mag' ),
            'src'         => ''
          )
        )
      ),
      array(
        'id'          => 'footer_second_column_1_width',
        'label'       => esc_html__( 'Footer column 1 width', 'mag' ),
		'desc'        => sprintf (esc_html_x( 'Enter custom width for first footer column. Please enter percentage, e.g., %s', '%s stands for example value. Do not delete it.' ,'mag' ), '<code>50%</code>'),
        'std'         => '25%',
        'type'        => 'text',
        'section'     => 'footer_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => 'footer_second_columns:not(vc_col-sm-12)',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'footer_second_column_2_width',
        'label'       => esc_html__( 'Footer column 2 width', 'mag' ),
		'desc'        => sprintf (esc_html_x( 'Enter custom width for second footer column. Please enter percentage, e.g., %s', '%s stands for example value. Do not delete it.' ,'mag' ), '<code>50%</code>'),
        'std'         => '25%',
        'type'        => 'text',
        'section'     => 'footer_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => 'footer_second_columns:not(vc_col-sm-12)',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'footer_second_column_3_width',
        'label'       => esc_html__( 'Footer column 3 width', 'mag' ),
		'desc'        => sprintf (esc_html_x( 'Enter custom width for third footer column. Please enter percentage, e.g., %s', '%s stands for example value. Do not delete it.' ,'mag' ), '<code>50%</code>'),
        'std'         => '25%',
        'type'        => 'text',
        'section'     => 'footer_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => 'footer_second_columns:not(vc_col-sm-12),footer_second_columns:not(vc_col-sm-6)',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'footer_second_column_4_width',
        'label'       => esc_html__( 'Footer column 4 width', 'mag' ),
		'desc'        => sprintf (esc_html_x( 'Enter custom width for fourth footer column. Please enter percentage, e.g., %s', '%s stands for example value. Do not delete it.' ,'mag' ), '<code>50%</code>'),
        'std'         => '25%',
        'type'        => 'text',
        'section'     => 'footer_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => 'footer_second_columns:is(vc_col-sm-3)',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'copyright_tab',
        'label'       => esc_html__( 'Copyright', 'mag' ),
        'desc'        => '',
        'std'         => '',
        'type'        => 'tab',
        'section'     => 'footer_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
	   array(
        'id'          => 'copyright_text_align',
        'label'       => esc_html__( 'Text align', 'mag' ),
        'desc'        => esc_html__( 'Text align for widgets in copyright area.', 'mag' ),
        'std'         => 'center',
        'type'        => 'select',
        'section'     => 'footer_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and',
        'choices'     => array( 
          array(
            'value'       => 'left',
            'label'       => esc_html__( 'Left', 'mag' ),
            'src'         => ''
          ),
          array(
            'value'       => 'center',
            'label'       => esc_html__( 'Center', 'mag' ),
            'src'         => ''
          ),
          array(
            'value'       => 'right',
            'label'       => esc_html__( 'Right', 'mag' ),
            'src'         => ''
          )
        )
      ),
      array(
        'id'          => 'copyright_bg',
        'label'       => esc_html__( 'Background', 'mag' ),
        'desc'        => esc_html__( 'You can either use color or upload a background image. Leave blank for default setting.', 'mag' ),
        'std'         => '',
        'type'        => 'background',
        'section'     => 'footer_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
	  array(
        'id'          => 'copyright_separator_color',
        'label'       => esc_html__( 'Separator color', 'mag' ),
        'desc'        => esc_html__( 'Choose color for copyright area separator.', 'mag' ),
        'std'         => '',
        'type'        => 'colorpicker_opacity',
        'section'     => 'footer_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'copyright_text_color',
        'label'       => esc_html__( 'Text color', 'mag' ),
        'desc'        => esc_html__( 'Choose text color for your copyright area widget content.', 'mag' ),
        'std'         => '',
        'type'        => 'colorpicker_opacity',
        'section'     => 'footer_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'copyright_link',
        'label'       => esc_html__( 'Link color', 'mag' ),
        'desc'        => esc_html__( 'Color for links located in your copyright area widgets.', 'mag' ),
        'std'         => '',
        'type'        => 'colorpicker_opacity',
        'section'     => 'footer_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'copyright_link_hover',
        'label'       => esc_html__( 'Link hover color', 'mag' ),
        'desc'        => esc_html__( 'Leave empty to use "Theme accent color".', 'mag' ),
        'std'         => '',
        'type'        => 'colorpicker_opacity',
        'section'     => 'footer_options',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
	  array(
        'id'          => 'post_general',
        'label'       => esc_html__( 'General', 'mag' ),
        'desc'        => '',
        'std'         => '',
        'type'        => 'tab',
        'section'     => 'articles_section',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'post_layout',
        'label'       => esc_html__( 'Default post layout', 'mag' ),
		'desc'        => sprintf (esc_html_x( '1. Full width content %1$s 2. Content / Right sidebar %1$s 3. Content / Left sidebar', '%1$s stands for line break' ,'mag' ), '<br/>'),
        'std'         => 'single-right-sidebar.php',
        'type'        => 'radio-image',
        'section'     => 'articles_section',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
	  array(
        'id'          => 'post_header_style_opt',
        'label'       => esc_html__( 'Default post header style', 'mag' ),
		'desc'        => sprintf (esc_html_x( '1. Simple style %1$s 2. Featured image in pre-content area %1$s 3. Featured image with title overlay in pre-content area %1$s', '%1$s stands for line break', 'mag' ), '<br/>'),
        'std'         => 'style_default',
        'type'        => 'radio-image',
        'section'     => 'articles_section',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'mnky_overlay_post_title_align',
        'label'       => esc_html__( 'Title position', 'mag' ),
        'desc'        => esc_html__( 'Choose title position', 'mag' ),
        'std'         => 'left',
        'type'        => 'select',
        'section'     => 'articles_section',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => 'post_header_style_opt:is(style_2)',
        'operator'    => 'and',
        'choices'     => array( 
          array(
            'value'       => 'left',
            'label'       => esc_html__( 'Left', 'mag' ),
            'src'         => ''
          ),
          array(
            'value'       => 'center',
            'label'       => esc_html__( 'Center', 'mag' ),
            'src'         => ''
          ),
          array(
            'value'       => 'right',
            'label'       => esc_html__( 'Right', 'mag' ),
            'src'         => ''
          )
        )
      ),
      array(
        'id'          => 'mnky_overlay_post_title_gradient',
        'label'       => esc_html__( 'Gradient for background image', 'mag' ),
        'desc'        => esc_html__( 'Activates dark gradient overlay for background image.', 'mag' ),
        'std'         => 'off',
        'type'        => 'on-off',
        'section'     => 'articles_section',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => 'post_header_style_opt:is(style_2)',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'mnky_post_width',
        'label'       => esc_html__( 'Set different width for paragraphs', 'mag' ),
        'desc'        => esc_html__( 'Specify maximum width for text paragraphs without affecting other content , e.g., images.', 'mag' ),
        'std'         => '',
        'type'        => 'text',
        'section'     => 'articles_section',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),  
	  array(
        'id'          => 'custom_post_date_time',
        'label'       => esc_html__( 'Custom date and time format', 'mag' ),
        'desc'        => esc_html__( 'i.e. "Just Now", "5 minutes ago" or "3 days ago". After 7 days date and time are displayed.', 'mag' ),
        'std'         => 'off',
        'type'        => 'on-off',
        'section'     => 'articles_section',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'operator'    => 'and'
      ),	  
	   array(
        'id'          => 'read_more_open_top',
        'label'       => esc_html__( 'Open read more links from top', 'mag' ),
        'desc'        => esc_html__( 'Makes read more link open post at the top.', 'mag' ),
        'std'         => 'off',
        'type'        => 'on-off',
        'section'     => 'articles_section',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'operator'    => 'and'
      ),
	  array(
        'id'          => 'post_content_sidebar',
        'label'       => esc_html__( 'Enable post content sidebar', 'mag' ),
        'desc'        => esc_html__( 'Do you want to display sidebar within post content? Add widgets in Appearance/Widgets - "Single Post Content Sidebar".', 'mag' ),
        'std'         => 'off',
        'type'        => 'on-off',
        'section'     => 'articles_section',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
	  array(
        'id'          => 'post_elements',
        'label'       => esc_html__( 'Elements', 'mag' ),
        'desc'        => '',
        'std'         => '',
        'type'        => 'tab',
        'section'     => 'articles_section',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'post_category',
        'label'       => esc_html__( 'Show post category', 'mag' ),
        'desc'        => esc_html__( 'Do you want to display category in post meta fields?', 'mag' ),
        'std'         => 'on',
        'type'        => 'on-off',
        'section'     => 'articles_section',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'post_author',
        'label'       => esc_html__( 'Post author in meta', 'mag' ),
        'desc'        => esc_html__( 'Do you want to display author in post meta fields?', 'mag' ),
        'std'         => 'on',
        'type'        => 'on-off',
        'section'     => 'articles_section',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'post_date',
        'label'       => esc_html__( 'Post date in meta', 'mag' ),
        'desc'        => esc_html__( 'Do you want to display date in post meta fields?', 'mag' ),
        'std'         => 'on',
        'type'        => 'on-off',
        'section'     => 'articles_section',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'post_comments',
        'label'       => esc_html__( 'Comments link in meta', 'mag' ),
        'desc'        => esc_html__( 'Do you want to display comment count in post meta fields?', 'mag' ),
        'std'         => 'on',
        'type'        => 'on-off',
        'section'     => 'articles_section',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
	  array(
        'id'          => 'post_views_counter',
        'label'       => esc_html__( 'Post views count in meta', 'mag' ),
        'desc'        => esc_html__( 'Do you want to display post views count in post meta fields? Requires Mag | Theme Core Extend plugin to be installed.', 'mag' ),
        'std'         => 'off',
        'type'        => 'on-off',
        'section'     => 'articles_section',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'post_links',
        'label'       => esc_html__( 'Previous &amp; next post link', 'mag' ),
        'desc'        => esc_html__( 'Do you want to display next and previous post links on single blog post page?', 'mag' ),
        'std'         => 'on',
        'type'        => 'on-off',
        'section'     => 'articles_section',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'post_tags',
        'label'       => esc_html__( 'Post tags after content', 'mag' ),
        'desc'        => esc_html__( 'Display post tags on single post page?', 'mag' ),
        'std'         => 'on',
        'type'        => 'on-off',
        'section'     => 'articles_section',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'author_description',
        'label'       => esc_html__( 'Post author description after content', 'mag' ),
        'desc'        => esc_html__( 'When ON, author info box will only appear for those post authors who have "Biographical Info" field filled!', 'mag' ),
        'std'         => 'on',
        'type'        => 'on-off',
        'section'     => 'articles_section',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
	  array(
        'id'          => 'keep_reading_tab',
        'label'       => esc_html__( 'Keep Reading', 'mag' ),
        'desc'        => '',
        'std'         => '',
        'type'        => 'tab',
        'section'     => 'articles_section',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
	  array(
        'id'          => 'keep_reading',
        'label'       => esc_html__( 'Enable more posts', 'mag' ),
        'desc'        => esc_html__( 'Loads full related posts after the current post content.', 'mag' ),
        'std'         => 'off',
        'type'        => 'on-off',
        'section'     => 'articles_section',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
	  array(
        'id'          => 'keep_reading_post_count',
        'label'       => esc_html__( 'How many posts to display?', 'mag' ),
        'desc'        => esc_html__( 'Choose total number of posts to load after the current post.', 'mag' ),
        'std'         => '1',
        'type'        => 'select',
        'section'     => 'articles_section',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => 'keep_reading:is(on)',
        'operator'    => 'and',
        'choices'     => array( 
          array(
            'value'       => '1',
            'label'       => '1',
            'src'         => ''
          ),
          array(
            'value'       => '2',
            'label'       => '2',
            'src'         => ''
          ),
          array(
            'value'       => '3',
            'label'       => '3',
            'src'         => ''
          ) ,
          array(
            'value'       => '4',
            'label'       => '4',
            'src'         => ''
          ),
          array(
            'value'       => '5',
            'label'       => '5',
            'src'         => ''
          ),
          array(
            'value'       => '6',
            'label'       => '6',
            'src'         => ''
          )		  
        )
      ),
	  array(
        'id'          => 'keep_reading_order',
        'label'       => esc_html__( 'Order', 'mag' ),
        'desc'        => esc_html__( 'Choose display order of the related posts.', 'mag' ),
        'std'         => 'DESC',
        'type'        => 'select',
        'section'     => 'articles_section',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => 'keep_reading:is(on)',
        'operator'    => 'and',
        'choices'     => array( 
          array(
            'value'       => 'DESC',
            'label'       => 'Descending',
            'src'         => ''
          ),
          array(
            'value'       => 'ASC',
            'label'       => 'Ascending',
            'src'         => ''
          )		  
        )
      ),
	  array(
        'id'          => 'keep_reading_order_by',
        'label'       => esc_html__( 'Order by', 'mag' ),
        'desc'        => esc_html__( 'Choose order type of the related posts.', 'mag' ),
        'std'         => 'date',
        'type'        => 'select',
        'section'     => 'articles_section',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => 'keep_reading:is(on)',
        'operator'    => 'and',
        'choices'     => array( 
          array(
            'value'       => 'date',
            'label'       => 'By date',
            'src'         => ''
          ),
          array(
            'value'       => 'meta_value_num',
            'label'       => 'By post views',
            'src'         => ''
          ),
          array(
            'value'       => 'modified',
            'label'       => 'By last modified date',
            'src'         => ''
          ),
          array(
            'value'       => 'comment_count',
            'label'       => 'By number of comments',
            'src'         => ''
          ),
          array(
            'value'       => 'rand',
            'label'       => 'Random order',
            'src'         => ''
          ),	
          array(
            'value'       => 'title',
            'label'       => 'By title',
            'src'         => ''
          ),
          array(
            'value'       => 'ID',
            'label'       => 'By ID',
            'src'         => ''
          ),
          array(
            'value'       => 'author',
            'label'       => 'By author',
            'src'         => ''
          ),
          array(
            'value'       => 'name',
            'label'       => 'By post slug',
            'src'         => ''
          ),
          array(
            'value'       => 'parent',
            'label'       => 'By post/page parent id',
            'src'         => ''
          ),	
          array(
            'value'       => 'none',
            'label'       => 'No order',
            'src'         => ''
          )			  
        )
      ),
	  array(
        'id'          => 'keep_reading_offset',
        'label'       => esc_html__( 'Offset', 'mag' ),
        'desc'        => esc_html__( 'Number of post to displace or pass over.', 'mag' ),
        'std'         => '',
        'type'        => 'text',
        'section'     => 'articles_section',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => 'keep_reading:is(on)',
        'operator'    => 'and'
      ),
	  array(
        'id'          => 'keep_reading_no_tags',
        'label'       => esc_html__( 'Post relation', 'mag' ),
        'desc'        => esc_html__( 'Choose how posts should be related to the current post.', 'mag' ),
        'std'         => '',
        'type'        => 'select',
        'section'     => 'articles_section',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => 'keep_reading:is(on)',
        'operator'    => 'and',
        'choices'     => array( 
          array(
            'value'       => '',
            'label'       => 'Categories and tags',
            'src'         => ''
          ),
          array(
            'value'       => 'no_tags',
            'label'       => 'Categories only',
            'src'         => ''
          )		  
        )
      ),
	  array(
        'id'          => 'keep_reading_tax_relation',
        'label'       => esc_html__( 'Taxonomy relation', 'mag' ),
        'desc'        => esc_html__( 'The logical relationship between categories and tags. If "OR" - related post must be at least in one of the current post\'s category OR tag. If "AND" - related post must be at least in one of the current post\'s category AND ALSO tag.', 'mag' ),
        'std'         => 'OR',
        'type'        => 'select',
        'section'     => 'articles_section',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => 'keep_reading:is(on)',
        'operator'    => 'and',
        'choices'     => array( 
          array(
            'value'       => 'OR',
            'label'       => 'OR',
            'src'         => ''
          ),
          array(
            'value'       => 'AND',
            'label'       => 'AND',
            'src'         => ''
          )		  
        )
      ),
	  array(
        'id'          => 'blog_general',
        'label'       => esc_html__( 'General', 'mag' ),
        'desc'        => '',
        'std'         => '',
        'type'        => 'tab',
        'section'     => 'blog_section',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
	  array(
        'id'          => 'blog_layout',
        'label'       => esc_html__( 'Blog page layout', 'mag' ),
		'desc'        => sprintf (esc_html_x( '1. Full width content %1$s 2. Content / Right sidebar %1$s 3. Content / Left sidebar', '%1$s stands for line break' ,'mag' ), '<br/>'),
        'std'         => 'right-sidebar',
        'type'        => 'radio-image',
        'section'     => 'blog_section',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
 	  array(
        'id'          => 'blog_title',
        'label'       => esc_html__( 'Blog page title', 'mag' ),
        'desc'        => esc_html__( 'Choose whether to display or hide blog page title.', 'mag' ),
        'std'         => 'on',
        'type'        => 'on-off',
        'section'     => 'blog_section',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
	  array(
        'id'          => 'blog_custom_page_title_styles',
        'label'       => esc_html__( 'Custom page title styles', 'mag' ),
        'desc'        => esc_html__( 'Use custom page title styles for blog page.', 'mag' ),
        'std'         => 'off',
        'type'        => 'on-off',
        'section'     => 'blog_section',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
		'condition'   => 'blog_title:is(on)',		
        'operator'    => 'and'
      ),
	  array(
        'id'          => 'blog_custom_page_title_paddings',
        'label'       => esc_html__( 'Title area paddings', 'mag' ),
		'desc'        => sprintf (esc_html_x('Set custom paddings for title area. Use shorthand format and add size units, e.g., %s', '%s stands for example value. Do not delete it.' ,'mag' ), '<code>40px 30px</code>'),
        'std'         => '',
        'type'        => 'text',
        'section'     => 'blog_section',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => 'child-options child-first',
		'condition'   => 'blog_title:is(on),blog_custom_page_title_styles:is(on)',
        'operator'    => 'and'
      ),
	  array(
        'id'          => 'blog_custom_page_title_text_color',
        'label'       => esc_html__( 'Title color', 'mag' ),
        'desc'        => esc_html__( 'Choose text color for page title.', 'mag' ),
        'std'         => '',
        'type'        => 'colorpicker_opacity',
        'section'     => 'blog_section',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => 'child-options',
		'condition'   => 'blog_title:is(on),blog_custom_page_title_styles:is(on)',
        'operator'    => 'and'
      ),
	  array(
        'id'          => 'blog_custom_page_title_background_color',
        'label'       => esc_html__( 'Background color', 'mag' ),
        'desc'        => esc_html__( 'Choose background color for page title area.', 'mag' ),
        'std'         => '',
        'type'        => 'colorpicker_opacity',
        'section'     => 'blog_section',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => 'child-options',
		'condition'   => 'blog_title:is(on),blog_custom_page_title_styles:is(on)',
        'operator'    => 'and'
      ),
	  array(
        'id'          => 'blog_custom_page_title_background_gradient',
        'label'       => esc_html__( 'Enable gradient background', 'mag' ),
        'desc'        => esc_html__( 'Enables left to right gradient background for page title area.', 'mag' ),
        'std'         => 'off',
        'type'        => 'on-off',
        'section'     => 'blog_section',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => 'child-options',
		'condition'   => 'blog_title:is(on),blog_custom_page_title_styles:is(on)',
        'operator'    => 'and'
      ),
	  array(
        'id'          => 'blog_custom_page_title_background_gradient_start',
        'label'       => esc_html__( 'Gradient start color', 'mag' ),
        'desc'        => esc_html__( 'Choose color at gradient start.', 'mag' ),
        'std'         => '',
        'type'        => 'colorpicker_opacity',
        'section'     => 'blog_section',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => 'child-options',
        'condition'   => 'blog_title:is(on),blog_custom_page_title_styles:is(on),blog_custom_page_title_background_gradient:is(on)',
        'operator'    => 'and'
      ),
	  array(
        'id'          => 'blog_custom_page_title_background_gradient_end',
        'label'       => esc_html__( 'Gradient end color', 'mag' ),
        'desc'        => esc_html__( 'Choose color at gradient end.', 'mag' ),
        'std'         => '',
        'type'        => 'colorpicker_opacity',
        'section'     => 'blog_section',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => 'child-options',
        'condition'   => 'blog_title:is(on),blog_custom_page_title_styles:is(on),blog_custom_page_title_background_gradient:is(on)',
        'operator'    => 'and'
      ),
	  array(
        'id'          => 'blog_custom_page_title_background_image_switch',
        'label'       => esc_html__( 'Enable background image', 'mag' ),
        'desc'        => esc_html__( 'Enables background image for title area.', 'mag' ),
        'std'         => 'off',
        'type'        => 'on-off',
        'section'     => 'blog_section',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => 'child-options',
		'condition'   => 'blog_title:is(on),blog_custom_page_title_styles:is(on)',
        'operator'    => 'and'
      ),
	  array(
        'id'          => 'blog_custom_page_title_background_image',
        'label'       => esc_html__( 'Title area background image', 'mag' ),
        'desc'        => esc_html__( 'Choose background image for the title area.', 'mag' ),
        'std'         => '',
        'type'        => 'background',
        'section'     => 'blog_section',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => 'child-options child-last',
        'condition'   => 'blog_title:is(on),blog_custom_page_title_styles:is(on),blog_custom_page_title_background_image_switch:is(on)',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'blog_pre_content_area',
        'label'       => esc_html__( 'Pre-content area', 'mag' ),
        'desc'        => esc_html__( 'Activates additional area before page title and main content.', 'mag' ),
        'std'         => 'off',
        'type'        => 'on-off',
        'section'     => 'blog_section',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'blog_pre_content_height',
        'label'       => esc_html__( 'Height (optional)', 'mag' ),
		'desc'        => sprintf (esc_html_x( 'Pre-content area height. Example: %s', '%s stands for example value. Do not delete it.' ,'mag' ), '<code>250px</code>'),
        'std'         => '',
        'type'        => 'text',
        'section'     => 'blog_section',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => 'child-options child-first',
        'condition'   => 'blog_pre_content_area:is(on)',
        'operator'    => 'and'
      ),
	  array(
        'id'          => 'blog_pre_content_responsive_height',
        'label'       => esc_html__( 'Responsive height (optional)', 'mag' ),
        'desc'        => esc_html__( 'Enables auto height in responsive mode.', 'mag' ),
        'std'         => 'off',
        'type'        => 'on-off',
        'section'     => 'blog_section',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => 'child-options',
        'condition'   => 'blog_pre_content_area:is(on)',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'blog_pre_content_width',
        'label'       => esc_html__( 'Max width (optional)', 'mag' ),
		'desc'        => sprintf (esc_html_x( 'Pre-content area max width. Example: %s', '%s stands for example value. Do not delete it.' ,'mag' ), '<code>1200px</code>'),
        'std'         => '',
        'type'        => 'text',
        'section'     => 'blog_section',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => 'child-options',
        'condition'   => 'blog_pre_content_area:is(on)',
        'operator'    => 'and'
      ),
	  array(
        'id'          => 'blog_pre_content_paddings',
        'label'       => esc_html__( 'Paddings (optional)', 'mag' ),
		'desc'        => sprintf (esc_html_x( 'Pre-content area paddings. Example: %s', '%s stands for example value. Do not delete it.' ,'mag' ), '<code>40px</code>'),
        'std'         => '',
        'type'        => 'text',
        'section'     => 'blog_section',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => 'child-options',
        'condition'   => 'blog_pre_content_area:is(on)',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'blog_pre_content_bg',
        'label'       => esc_html__( 'Background', 'mag' ),
        'desc'        => esc_html__( 'Set custom background color or image.', 'mag' ),
        'std'         => '',
        'type'        => 'background',
        'section'     => 'blog_section',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => 'child-options',
        'condition'   => 'blog_pre_content_area:is(on)',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'blog_pre_content_html',
        'label'       => esc_html__( 'Custom HTML', 'mag' ),
        'desc'        => esc_html__( 'Insert any custom code you wish. Shortcodes allowed.', 'mag' ),
        'std'         => '',
        'type'        => 'textarea-simple',
        'section'     => 'blog_section',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => 'child-options child-last',
        'condition'   => 'blog_pre_content_area:is(on)',
        'operator'    => 'and'
      ),
	       array(
        'id'          => 'exclude_from_blog',
        'label'       => esc_html__( 'Exclude category from blog', 'mag' ),
        'desc'        => esc_html__( 'This option will exclude selected category posts from blog and search pages.', 'mag' ),
        'std'         => '',
        'type'        => 'category-checkbox',
        'section'     => 'blog_section',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'blog_offset',
        'label'       => esc_html__( 'Offset', 'mag' ),
		'desc'        => sprintf (esc_html_x( 'Number of post to displace or pass over. Example (to pass two posts enter): %s', '%s stands for example value. Do not delete it.' ,'mag' ), '<code>2</code>'),
        'std'         => '',
        'type'        => 'text',
        'section'     => 'blog_section',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
	  array(
        'id'          => 'pagination',
        'label'       => esc_html__( 'Pagination type', 'mag' ),
        'desc'        => esc_html__( 'Enable ajax "Load more" button on blog/archive pages', 'mag' ),
        'std'         => 'default',
        'type'        => 'select',
        'section'     => 'blog_section',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and',
		'choices'     => array( 
            array(
                'value'       => 'default',
                'label'       => esc_html__( 'Numeric Pagination', 'mag' ),
                'src'         => ''
            ),
			array(
                'value'       => 'load-more',
                'label'       => esc_html__( 'Load More Button', 'mag' ),
                'src'         => ''
            ),
            array(
                'value'       => 'infinite-scroll',
                'label'       => esc_html__( 'Infinite Scroll', 'mag' ),
                'src'         => ''
            )  
        )
      ),	  
	  array(
        'id'          => 'blog_post',
        'label'       => esc_html__( 'Blog Post Display', 'mag' ),
        'desc'        => '',
        'std'         => '',
        'type'        => 'tab',
        'section'     => 'blog_section',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
	  array(
        'id'          => 'archive_post_style',
        'label'       => esc_html__( 'Post style', 'mag' ),
        'desc'        => esc_html__( 'Choose your post style.', 'mag' ),
        'std'         => '1',
        'type'        => 'select',
        'section'     => 'blog_section',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and',
        'choices'     => array( 
          array(
            'value'       => '1',
            'label'       => esc_html__( 'Image above content', 'mag' ),
            'src'         => ''
          ),
          array(
            'value'       => '2',
            'label'       => esc_html__( 'Content over image', 'mag' ),
            'src'         => ''
          ),
          array(
            'value'       => '3',
            'label'       => esc_html__( 'Image on the left', 'mag' ),
            'src'         => ''
          )         
        )
      ),
      array(
        'id'          => 'archive_post_layout',
        'label'       => esc_html__( 'Post column count', 'mag' ),
		'desc'        => '',
        'std'         => 'layout-one-column',
        'type'        => 'select',
        'section'     => 'blog_section',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'or',
		'choices'     => array( 
          array(
            'value'       => 'layout-one-column',
            'label'       => esc_html__( 'One column', 'mag' ),
            'src'         => ''
          ),
          array(
            'value'       => 'layout-two-column',
            'label'       => esc_html__( 'Two columns', 'mag' ),
            'src'         => ''
          ),
          array(
            'value'       => 'layout-three-column',
            'label'       => esc_html__( 'Three columns', 'mag' ),
            'src'         => ''
          ) 
		)
      ),
      array(
        'id'          => 'content_type',
        'label'       => esc_html__( 'Content type', 'mag' ),
        'desc'        => esc_html__( 'Choose what to display on blog index pages. Note that only \'Full Content\' respects WordPress \'read more\' tag.', 'mag' ),
        'std'         => 'full_content',
        'type'        => 'select',
        'section'     => 'blog_section',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and',
        'choices'     => array( 
          array(
            'value'       => 'none',
            'label'       => esc_html__( 'None', 'mag' ),
            'src'         => ''
          ),
          array(
            'value'       => 'excerpt',
            'label'       => esc_html__( 'Excerpt', 'mag' ),
            'src'         => ''
          ),
          array(
            'value'       => 'full_content',
            'label'       => esc_html__( 'Full content', 'mag' ),
            'src'         => ''
          )
        )
      ),
	  array(
        'id'          => 'blog_post_title_size',
        'label'       => esc_html__( 'Custom post title size', 'mag' ),
		'desc'        => sprintf (esc_html_x( 'Set optional custom post title size for your selected design. Please add size units, e.g., %s', '%s stands for example value. Do not delete it.' ,'mag' ), '<code>24px</code>'),
        'std'         => '',
        'type'        => 'text',
        'section'     => 'blog_section',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
	  array(
        'id'          => 'blog_post_title_size_responsive',
        'label'       => esc_html__( 'Custom post title size on mobile', 'mag' ),
		'desc'        => sprintf (esc_html_x( 'Set optional custom post title size for mobile screens starting at 767px. Please add size units, e.g., %s', '%s stands for example value. Do not delete it.' ,'mag' ), '<code>24px</code>'),
        'std'         => '',
        'type'        => 'text',
        'section'     => 'blog_section',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),	
	  array(
        'id'          => 'blog_post_elements',
        'label'       => esc_html__( 'Blog Post Elements', 'mag' ),
        'desc'        => '',
        'std'         => '',
        'type'        => 'tab',
        'section'     => 'blog_section',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),	  
 	  array(
        'id'          => 'post_image_blog',
        'label'       => esc_html__( 'Post image', 'mag' ),
        'desc'        => esc_html__( 'Do you want to display post featured image? Works with default post style.', 'mag' ),
        'std'         => 'on',
        'type'        => 'on-off',
        'section'     => 'blog_section',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
	  array(
        'id'          => 'default_post_image',
        'label'       => esc_html__( 'Default post image', 'mag' ),
        'desc'        => esc_html__( 'This is the default image applied to all posts that do not have featured image set.', 'mag' ),
        'std'         => '',
        'type'        => 'upload',
        'section'     => 'blog_section',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => 'ot-upload-attachment-id',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'post_review_rating',
        'label'       => esc_html__( 'Post review rating (stars)', 'mag' ),
        'desc'        => esc_html__( 'Do you want to display star rating in post meta fields? Requires Mag | Theme Core Extend plugin to be installed.', 'mag' ),
        'std'         => 'off',
        'type'        => 'on-off',
        'section'     => 'blog_section',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'post_category_blog',
        'label'       => esc_html__( 'Post category in blog meta', 'mag' ),
        'desc'        => esc_html__( 'Do you want to display category in post meta fields?', 'mag' ),
        'std'         => 'on',
        'type'        => 'on-off',
        'section'     => 'blog_section',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'post_author_blog',
        'label'       => esc_html__( 'Post author in blog meta', 'mag' ),
        'desc'        => esc_html__( 'Do you want to display author in post meta fields?', 'mag' ),
        'std'         => 'on',
        'type'        => 'on-off',
        'section'     => 'blog_section',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'post_date_blog',
        'label'       => esc_html__( 'Post date in blog meta', 'mag' ),
        'desc'        => esc_html__( 'Do you want to display date in post meta fields?', 'mag' ),
        'std'         => 'on',
        'type'        => 'on-off',
        'section'     => 'blog_section',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'post_comments_blog',
        'label'       => esc_html__( 'Post comments in blog meta', 'mag' ),
        'desc'        => esc_html__( 'Do you want to display comment count in post meta fields?', 'mag' ),
        'std'         => 'on',
        'type'        => 'on-off',
        'section'     => 'blog_section',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
	  array(
        'id'          => 'post_views_counter_blog',
        'label'       => esc_html__( 'Post views count in blog meta', 'mag' ),
        'desc'        => esc_html__( 'Do you want to display post views count in post meta fields? Requires Mag | Theme Core Extend plugin to be installed.', 'mag' ),
        'std'         => 'off',
        'type'        => 'on-off',
        'section'     => 'blog_section',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
	  array(
        'id'          => 'blog_loop_content',
        'label'       => esc_html__( 'Enable blog loop content', 'mag' ),
        'desc'        => esc_html__( 'Add custom content after each post.', 'mag' ),
        'std'         => 'off',
        'type'        => 'on-off',
        'section'     => 'blog_section',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
        'condition'   => '',
        'operator'    => 'and'
      ),
	  array(
        'id'          => 'blog_loop_custom_code',
        'label'       => esc_html__( 'Blog loop content', 'mag' ),
		'desc'        => esc_html__( 'Add your custom shortcode or html, e.g., sharing or advertisement. This content will be placed after each post in this loop.', 'mag' ),
        'std'         => '',
        'type'        => 'text',
        'section'     => 'blog_section',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => '',
		'condition'   => 'blog_loop_content:is(on)',
        'operator'    => 'and'
      ),
      array(
        'id'          => 'category_styles',
        'label'       => esc_html__( 'Category style', 'mag' ),
        'desc'        => esc_html__( 'Style any category different from default.', 'mag' ),
        'std'         => '',
        'type'        => 'list-item',
        'section'     => 'category_style_tab',
        'rows'        => '',
        'post_type'   => '',
        'taxonomy'    => '',
        'min_max_step'=> '',
        'class'       => 'category-styles',
        'condition'   => '',
        'operator'    => 'and',
        'settings'    => array( 
          array(
            'id'          => 'cs_select',
            'label'       => esc_html__( 'Select category', 'mag' ),
            'desc'        => esc_html__( 'Choose category to style.', 'mag' ),
            'std'         => '',
            'type'        => 'category-select',
            'rows'        => '',
            'post_type'   => '',
            'taxonomy'    => '',
            'min_max_step'=> '',
            'class'       => '',
            'condition'   => '',
            'operator'    => 'and'
          ),
          array(
            'id'          => 'category_title',
            'label'       => esc_html__( 'Category title', 'mag' ),
            'desc'        => esc_html__( 'Choose whether to display or hide category title.', 'mag' ),
            'std'         => 'on',
            'type'        => 'on-off',
            'rows'        => '',
            'post_type'   => '',
            'taxonomy'    => '',
            'min_max_step'=> '',
            'class'       => '',
            'condition'   => '',
            'operator'    => 'and'
          ),
		  array(
			'id'          => 'cat_custom_page_title_styles',
			'label'       => esc_html__( 'Custom page title styles', 'mag' ),
			'desc'        => esc_html__( 'Use custom page title styles for category.', 'mag' ),
			'std'         => 'off',
			'type'        => 'on-off',
			'rows'        => '',
			'post_type'   => '',
			'taxonomy'    => '',
			'min_max_step'=> '',
			'class'       => '',
			'condition'   => 'category_title:is(on)',		
			'operator'    => 'and'
		  ),
		  array(
			'id'          => 'cat_custom_page_title_paddings',
			'label'       => esc_html__( 'Title area paddings', 'mag' ),
			'desc'        => sprintf (esc_html_x('Set custom paddings for title area. Use shorthand format and add size units, e.g., %s', '%s stands for example value. Do not delete it.' ,'mag' ), '<code>40px 30px</code>'),
			'std'         => '',
			'type'        => 'text',
			'rows'        => '',
			'post_type'   => '',
			'taxonomy'    => '',
			'min_max_step'=> '',
			'class'       => 'child-options child-first',
			'condition'   => 'category_title:is(on),cat_custom_page_title_styles:is(on)',
			'operator'    => 'and'
		  ),
		  array(
			'id'          => 'cat_custom_page_title_text_color',
			'label'       => esc_html__( 'Title color', 'mag' ),
			'desc'        => esc_html__( 'Choose text color for page title.', 'mag' ),
			'std'         => '',
			'type'        => 'colorpicker_opacity',
			'rows'        => '',
			'post_type'   => '',
			'taxonomy'    => '',
			'min_max_step'=> '',
			'class'       => 'child-options',
			'condition'   => 'category_title:is(on),cat_custom_page_title_styles:is(on)',
			'operator'    => 'and'
		  ),
		  array(
			'id'          => 'cat_custom_page_title_background_color',
			'label'       => esc_html__( 'Background color', 'mag' ),
			'desc'        => esc_html__( 'Choose background color for page title area.', 'mag' ),
			'std'         => '',
			'type'        => 'colorpicker_opacity',
			'rows'        => '',
			'post_type'   => '',
			'taxonomy'    => '',
			'min_max_step'=> '',
			'class'       => 'child-options',
			'condition'   => 'category_title:is(on),cat_custom_page_title_styles:is(on)',
			'operator'    => 'and'
		  ),
		  array(
			'id'          => 'cat_custom_page_title_background_gradient',
			'label'       => esc_html__( 'Enable gradient background', 'mag' ),
			'desc'        => esc_html__( 'Enables left to right gradient background for page title area.', 'mag' ),
			'std'         => 'off',
			'type'        => 'on-off',
			'rows'        => '',
			'post_type'   => '',
			'taxonomy'    => '',
			'min_max_step'=> '',
			'class'       => 'child-options',
			'condition'   => 'category_title:is(on),cat_custom_page_title_styles:is(on)',
			'operator'    => 'and'
		  ),
		  array(
			'id'          => 'cat_custom_page_title_background_gradient_start',
			'label'       => esc_html__( 'Gradient start color', 'mag' ),
			'desc'        => esc_html__( 'Choose color at gradient start.', 'mag' ),
			'std'         => '',
			'type'        => 'colorpicker_opacity',
			'rows'        => '',
			'post_type'   => '',
			'taxonomy'    => '',
			'min_max_step'=> '',
			'class'       => 'child-options',
			'condition'   => 'category_title:is(on),cat_custom_page_title_styles:is(on),cat_custom_page_title_background_gradient:is(on)',
			'operator'    => 'and'
		  ),
		  array(
			'id'          => 'cat_custom_page_title_background_gradient_end',
			'label'       => esc_html__( 'Gradient end color', 'mag' ),
			'desc'        => esc_html__( 'Choose color at gradient end.', 'mag' ),
			'std'         => '',
			'type'        => 'colorpicker_opacity',
			'rows'        => '',
			'post_type'   => '',
			'taxonomy'    => '',
			'min_max_step'=> '',
			'class'       => 'child-options',
			'condition'   => 'category_title:is(on),cat_custom_page_title_styles:is(on),cat_custom_page_title_background_gradient:is(on)',
			'operator'    => 'and'
		  ),
		  array(
			'id'          => 'cat_custom_page_title_background_image_switch',
			'label'       => esc_html__( 'Enable background image', 'mag' ),
			'desc'        => esc_html__( 'Enables background image for title area.', 'mag' ),
			'std'         => 'off',
			'type'        => 'on-off',
			'rows'        => '',
			'post_type'   => '',
			'taxonomy'    => '',
			'min_max_step'=> '',
			'class'       => 'child-options',
			'condition'   => 'category_title:is(on),cat_custom_page_title_styles:is(on)',
			'operator'    => 'and'
		  ),
		  array(
			'id'          => 'cat_custom_page_title_background_image',
			'label'       => esc_html__( 'Title area background image', 'mag' ),
			'desc'        => esc_html__( 'Choose background image for the title area.', 'mag' ),
			'std'         => '',
			'type'        => 'background',
			'rows'        => '',
			'post_type'   => '',
			'taxonomy'    => '',
			'min_max_step'=> '',
			'class'       => 'child-options child-last',
			'condition'   => 'category_title:is(on),cat_custom_page_title_styles:is(on),cat_custom_page_title_background_image_switch:is(on)',
			'operator'    => 'and'
		  ),		  
          array(
            'id'          => 'cat_post_style',
            'label'       => esc_html__( 'Post style', 'mag' ),
            'desc'        => esc_html__( 'Choose custom post style.', 'mag' ),
            'std'         => '',
            'type'        => 'select',
            'rows'        => '',
            'post_type'   => '',
            'taxonomy'    => '',
            'min_max_step'=> '',
            'class'       => '',
            'condition'   => '',
            'operator'    => 'and',
            'choices'     => array( 
              array(
                'value'       => 'default',
                'label'       => esc_html__( 'Inherit from blog settings', 'mag' ),
                'src'         => ''
              ),
			  array(
                'value'       => '1',
                'label'       => esc_html__( 'Default', 'mag' ),
                'src'         => ''
              ),
              array(
                'value'       => '2',
                'label'       => esc_html__( 'Image overlay', 'mag' ),
                'src'         => ''
              ),
              array(
                'value'       => '3',
                'label'       => esc_html__( 'Image left', 'mag' ),
                'src'         => ''
              )  			  
            )
          ),
          array(
            'id'          => 'cat_post_layout',
            'label'       => esc_html__( 'Post column count', 'mag' ),
			'desc'        => '',
			'std'         => 'default',
			'type'        => 'select',
			'section'     => 'blog_section',
			'rows'        => '',
			'post_type'   => '',
			'taxonomy'    => '',
			'min_max_step'=> '',
			'class'       => '',
			'condition'   => '',
			'operator'    => 'or',
			'choices'     => array(
              array(
                'value'       => 'default',
                'label'       => esc_html__( 'Inherit from blog settings', 'mag' ),
                'src'         => ''
              ),			
			  array(
				'value'       => 'layout-one-column',
				'label'       => esc_html__( 'One column', 'mag' ),
				'src'         => ''
			  ),
			  array(
				'value'       => 'layout-two-column',
				'label'       => esc_html__( 'Two column', 'mag' ),
				'src'         => ''
			  ),
			  array(
				'value'       => 'layout-three-column',
				'label'       => esc_html__( 'Three column', 'mag' ),
				'src'         => ''
			  ) 
			)          
		  ),
		  array(
			'id'          => 'cat_post_title_size',
			'label'       => esc_html__( 'Custom post title size', 'mag' ),
			'desc'        => sprintf (esc_html_x( 'Set optional custom post title size for your selected design. Please add size units, e.g., %s', '%s stands for example value. Do not delete it.' ,'mag' ), '<code>24px</code>'),
			'std'         => '',
			'type'        => 'text',
			'rows'        => '',
			'post_type'   => '',
			'taxonomy'    => '',
			'min_max_step'=> '',
			'class'       => '',
			'condition'   => '',
			'operator'    => 'and'
		  ),
		  array(
			'id'          => 'cat_post_title_size_responsive',
			'label'       => esc_html__( 'Custom post title size on mobile', 'mag' ),
			'desc'        => sprintf (esc_html_x( 'Set optional custom post title size for mobile screens starting at 767px. Please add size units, e.g., %s', '%s stands for example value. Do not delete it.' ,'mag' ), '<code>24px</code>'),
			'std'         => '',
			'type'        => 'text',
			'rows'        => '',
			'post_type'   => '',
			'taxonomy'    => '',
			'min_max_step'=> '',
			'class'       => '',
			'condition'   => '',
			'operator'    => 'and'
		  ),		  
		  array(
            'id'          => 'cat_layout',
            'label'       => esc_html__( 'Category page layout', 'mag' ),
			'desc'        => sprintf (esc_html_x( '1. Default - inherit from blog settings %1$s 2. Full width content %1$s 3. Content / Right sidebar %1$s 4. Content / Left sidebar', '%1$s stands for line break' ,'mag' ), '<br/>'),
            'std'         => '',
            'type'        => 'radio-image',
            'rows'        => '',
            'post_type'   => '',
            'taxonomy'    => '',
            'min_max_step'=> '',
            'class'       => '',
            'condition'   => '',
            'operator'    => 'and'
          ),
		  array(
			'id'          => 'cat_content_type',
			'label'       => esc_html__( 'Content type', 'mag' ),
			'desc'        => esc_html__( 'Choose what to display on blog index pages. Note that only \'Full Content\' respects WordPress \'read more\' tag.', 'mag' ),
			'std'         => 'default',
			'type'        => 'select',
			'rows'        => '',
			'post_type'   => '',
			'taxonomy'    => '',
			'min_max_step'=> '',
			'class'       => '',
			'condition'   => '',
			'operator'    => 'and',
			'choices'     => array( 
			  array(
				'value'       => 'default',
				'label'       => esc_html__( 'Inherit from blog settings', 'mag' ),
				'src'         => ''
			  ),			  
			  array(
				'value'       => 'none',
				'label'       => esc_html__( 'None', 'mag' ),
				'src'         => ''
			  ),
			  array(
				'value'       => 'excerpt',
				'label'       => esc_html__( 'Excerpt', 'mag' ),
				'src'         => ''
			  ),
			  array(
				'value'       => 'full_content',
				'label'       => esc_html__( 'Full content', 'mag' ),
				'src'         => ''
			  )
			)
		  ),		  
          array(
            'id'          => 'cat_offset',
            'label'       => esc_html__( 'Offset', 'mag' ),
			'desc'        => sprintf (esc_html_x( 'Number of post to displace or pass over. Example (to pass two posts enter): %s', '%s stands for example value. Do not delete it.' ,'mag' ), '<code>2</code>'),
            'std'         => '',
            'type'        => 'text',
            'rows'        => '',
            'post_type'   => '',
            'taxonomy'    => '',
            'min_max_step'=> '',
            'class'       => '',
            'condition'   => '',
            'operator'    => 'and'
          ),
		  array(
			'id'          => 'cat_loop_content',
			'label'       => esc_html__( 'Loop content from blog options', 'mag' ),
			'desc'        => esc_html__( 'Enable loop content settings set in blog options. ', 'mag' ),
			'std'         => 'on',
			'type'        => 'on-off',
			'rows'        => '',
			'post_type'   => '',
			'taxonomy'    => '',
			'min_max_step'=> '',
			'class'       => '',
			'condition'   => '',
			'operator'    => 'and'
		  ),
          array(
            'id'          => 'cat_pre_content_area',
            'label'       => esc_html__( 'Pre-content area', 'mag' ),
            'desc'        => esc_html__( 'Activates additional area before page title and main content.', 'mag' ),
            'std'         => 'off',
            'type'        => 'on-off',
            'rows'        => '',
            'post_type'   => '',
            'taxonomy'    => '',
            'min_max_step'=> '',
            'class'       => '',
            'condition'   => '',
            'operator'    => 'and'
          ),
          array(
            'id'          => 'cat_pre_content_height',
            'label'       => esc_html__( 'Height (optional)', 'mag' ),
			'desc'        => sprintf (esc_html_x( 'Pre-content area height. Example: %s', '%s stands for example value. Do not delete it.' ,'mag' ), '<code>250px</code>'),
            'std'         => '',
            'type'        => 'text',
            'rows'        => '',
            'post_type'   => '',
            'taxonomy'    => '',
            'min_max_step'=> '',
            'class'       => 'child-options child-first',
            'condition'   => 'cat_pre_content_area:is(on)',
            'operator'    => 'and'
          ),
		  array(
            'id'          => 'cat_pre_content_responsive_height',
            'label'       => esc_html__( 'Responsive height (optional)', 'mag' ),
            'desc'        => esc_html__( 'Enables auto height in responsive mode.', 'mag' ),
            'std'         => 'off',
            'type'        => 'on-off',
            'rows'        => '',
            'post_type'   => '',
            'taxonomy'    => '',
            'min_max_step'=> '',
            'class'       => 'child-options',
            'condition'   => 'cat_pre_content_area:is(on)',
            'operator'    => 'and'
          ),
          array(
            'id'          => 'cat_pre_content_width',
            'label'       => esc_html__( 'Max width (optional)', 'mag' ),
			'desc'        => sprintf (esc_html_x( 'Pre-content area max width. Example: %s', '%s stands for example value. Do not delete it.' ,'mag' ), '<code>1200px</code>'),
            'std'         => '',
            'type'        => 'text',
            'rows'        => '',
            'post_type'   => '',
            'taxonomy'    => '',
            'min_max_step'=> '',
            'class'       => 'child-options',
            'condition'   => 'cat_pre_content_area:is(on)',
            'operator'    => 'and'
          ),
		  array(
			'id'          => 'cat_pre_content_paddings',
			'label'       => esc_html__( 'Paddings (optional)', 'mag' ),
			'desc'        => sprintf (esc_html_x( 'Pre-content area paddings. Example: %s', '%s stands for example value. Do not delete it.' ,'mag' ), '<code>40px</code>'),
			'std'         => '',
			'type'        => 'text',
			'rows'        => '',
			'post_type'   => '',
			'taxonomy'    => '',
			'min_max_step'=> '',
			'class'       => 'child-options',
			'condition'   => 'cat_pre_content_area:is(on)',
			'operator'    => 'and'
		  ),		  
          array(
            'id'          => 'cat_pre_content_bg',
            'label'       => esc_html__( 'Background', 'mag' ),
            'desc'        => esc_html__( 'Set custom background color or image.', 'mag' ),
            'std'         => '',
            'type'        => 'background',
            'rows'        => '',
            'post_type'   => '',
            'taxonomy'    => '',
            'min_max_step'=> '',
            'class'       => 'child-options',
            'condition'   => 'cat_pre_content_area:is(on)',
            'operator'    => 'and'
          ),
          array(
            'id'          => 'cat_pre_content_html',
            'label'       => esc_html__( 'Custom HTML', 'mag' ),
            'desc'        => esc_html__( 'Insert any custom code you wish. Shortcodes are allowed.', 'mag' ),
            'std'         => '',
            'type'        => 'textarea-simple',
            'rows'        => '10',
            'post_type'   => '',
            'taxonomy'    => '',
            'min_max_step'=> '',
            'class'       => 'child-options child-last',
            'condition'   => 'cat_pre_content_area:is(on)',
            'operator'    => 'and'
          )
        )
      )
    )
  );
  
  /* allow settings to be filtered before saving */
  $custom_settings = apply_filters( ot_settings_id() . '_args', $custom_settings );
  
  /* settings are not the same update the DB */
  if ( $saved_settings !== $custom_settings ) {
    update_option( ot_settings_id(), $custom_settings ); 
  }
  
  /* Lets OptionTree know the UI Builder is being overridden */
  global $ot_has_custom_theme_options;
  $ot_has_custom_theme_options = true;
  
}